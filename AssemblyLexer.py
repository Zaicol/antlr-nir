# Generated from Assembly.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,102,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,
        1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,5,10,68,8,10,10,10,12,10,71,
        9,10,1,11,4,11,74,8,11,11,11,12,11,75,1,12,3,12,79,8,12,1,12,1,12,
        1,13,4,13,84,8,13,11,13,12,13,85,1,13,1,13,1,14,1,14,5,14,92,8,14,
        10,14,12,14,95,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,93,0,16,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,1,0,4,1,0,97,122,3,0,48,57,95,95,97,122,1,0,48,57,2,
        0,9,9,32,32,106,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,
        7,40,1,0,0,0,9,43,1,0,0,0,11,46,1,0,0,0,13,49,1,0,0,0,15,53,1,0,
        0,0,17,57,1,0,0,0,19,61,1,0,0,0,21,65,1,0,0,0,23,73,1,0,0,0,25,78,
        1,0,0,0,27,83,1,0,0,0,29,89,1,0,0,0,31,98,1,0,0,0,33,34,5,58,0,0,
        34,2,1,0,0,0,35,36,5,44,0,0,36,4,1,0,0,0,37,38,5,82,0,0,38,39,5,
        48,0,0,39,6,1,0,0,0,40,41,5,82,0,0,41,42,5,49,0,0,42,8,1,0,0,0,43,
        44,5,82,0,0,44,45,5,50,0,0,45,10,1,0,0,0,46,47,5,82,0,0,47,48,5,
        51,0,0,48,12,1,0,0,0,49,50,5,77,0,0,50,51,5,79,0,0,51,52,5,86,0,
        0,52,14,1,0,0,0,53,54,5,65,0,0,54,55,5,68,0,0,55,56,5,68,0,0,56,
        16,1,0,0,0,57,58,5,83,0,0,58,59,5,85,0,0,59,60,5,66,0,0,60,18,1,
        0,0,0,61,62,5,74,0,0,62,63,5,77,0,0,63,64,5,80,0,0,64,20,1,0,0,0,
        65,69,7,0,0,0,66,68,7,1,0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,
        0,0,0,69,70,1,0,0,0,70,22,1,0,0,0,71,69,1,0,0,0,72,74,7,2,0,0,73,
        72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,24,1,0,0,
        0,77,79,5,13,0,0,78,77,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,
        5,10,0,0,81,26,1,0,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,85,1,0,0,0,
        85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,6,13,0,0,88,28,1,
        0,0,0,89,93,5,59,0,0,90,92,9,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,
        94,1,0,0,0,93,91,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,6,14,
        0,0,97,30,1,0,0,0,98,99,5,73,0,0,99,100,5,78,0,0,100,101,5,67,0,
        0,101,32,1,0,0,0,6,0,69,75,78,85,93,1,6,0,0
    ]

class AssemblyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    MOV = 7
    ADD = 8
    SUB = 9
    JMP = 10
    ID = 11
    INT = 12
    NL = 13
    WS = 14
    COMMENT = 15
    INC = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "','", "'R0'", "'R1'", "'R2'", "'R3'", "'MOV'", "'ADD'", 
            "'SUB'", "'JMP'", "'INC'" ]

    symbolicNames = [ "<INVALID>",
            "MOV", "ADD", "SUB", "JMP", "ID", "INT", "NL", "WS", "COMMENT", 
            "INC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "MOV", 
                  "ADD", "SUB", "JMP", "ID", "INT", "NL", "WS", "COMMENT", 
                  "INC" ]

    grammarFileName = "Assembly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


